// app/api/user/sessions/route.js
import { supabaseServer } from '@/lib/supabase/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { NextResponse } from 'next/server';

/**
 * üîπ GET: ‡∏î‡∏∂‡∏á session ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 20 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
 */
export async function GET() {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à schema ‡∏ß‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠ user_id ‡∏´‡∏£‡∏∑‡∏≠ user_email
    const { data, error } = await supabaseServer
      .from('user_sessions')
      .select('id, user_id, action, ip_address, user_agent, created_at')
      .eq('user_id', session.user.email) // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô user_email ‡∏ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á
      .order('created_at', { ascending: false })
      .limit(20);

    if (error) {
      console.error('[User Sessions API] ‚ùå', error.message || error);
      return NextResponse.json({ error: error.message }, { status: 500 });
    }

    return NextResponse.json(data || [], {
      status: 200,
      headers: { 'Cache-Control': 'no-store' },
    });
  } catch (err) {
    console.error('[User Sessions API] Unexpected ‚ùå', err.message || err);
    return NextResponse.json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' }, { status: 500 });
  }
}
