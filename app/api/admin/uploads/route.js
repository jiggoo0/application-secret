import { NextResponse } from 'next/server';
import { supabaseServer } from '@/lib/supabase/server';
// import { getAdminSession } from '@/lib/auth/server'; // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö session ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå

/**
 * @route GET /api/admin/uploads
 * @desc ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Supabase (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
 * @param {Request} request
 */
export async function GET(request) {
  try {
    // üß© (Optional) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    // const session = await getAdminSession();
    // if (!session?.user?.isAdmin) {
    //   return NextResponse.json({ error: 'Unauthorized' }, { status: 403 });
    // }

    const { searchParams } = new URL(request.url);
    const limit = parseInt(searchParams.get('limit') || '50', 10);
    const offset = parseInt(searchParams.get('offset') || '0', 10);

    // ‚úÖ Query Supabase
    const { data, error, count } = await supabaseServer
      .from('uploads')
      .select('id, user_email, name, path, type, status, created_at', { count: 'exact' })
      .order('created_at', { ascending: false })
      .range(offset, offset + limit - 1);

    // ‚ùå ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error ‡∏à‡∏≤‡∏Å Supabase
    if (error) {
      console.error('‚ùå [API /admin/uploads] Supabase error:', error);
      return NextResponse.json(
        { ok: false, error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ', details: error.message },
        { status: 500 },
      );
    }

    // ‚úÖ Response data ‡∏û‡∏£‡πâ‡∏≠‡∏° meta
    return NextResponse.json(
      {
        ok: true,
        meta: {
          total: count ?? data?.length ?? 0,
          limit,
          offset,
        },
        uploads: data || [],
      },
      { status: 200 },
    );
  } catch (err) {
    console.error('üî• [API /admin/uploads] Unexpected error:', err);
    return NextResponse.json(
      { ok: false, error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå', details: err.message },
      { status: 500 },
    );
  }
}
