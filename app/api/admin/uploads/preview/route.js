import { NextResponse } from 'next/server';
import { supabaseServer } from '@/lib/supabase/server';

/**
 * üì¶ POST /api/admin/uploads/preview
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå signed URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö preview ‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å bucket
 * Request body: { path: string }
 */
export async function POST(req) {
  try {
    const { path } = await req.json();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö input
    if (!path || typeof path !== 'string') {
      return NextResponse.json({ error: 'Missing or invalid file path' }, { status: 400 });
    }

    const expiresIn = 3600; // ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á

    const { data, error } = await supabaseServer.storage
      .from('user-uploads') // ‡∏ä‡∏∑‡πà‡∏≠ bucket
      .createSignedUrl(path, expiresIn);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö error
    if (error || !data?.signedUrl) {
      console.error('[Preview] ‚ùå Supabase error:', error);
      return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå preview ‡πÑ‡∏î‡πâ' }, { status: 500 });
    }

    // ‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ client
    return NextResponse.json({ url: data.signedUrl }, { status: 200 });
  } catch (err) {
    console.error('[Preview] ‚ùå Unexpected error:', err);
    return NextResponse.json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' }, { status: 500 });
  }
}
