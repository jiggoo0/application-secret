// scripts/Database/importKeylock.js
import fs from 'fs';
import path from 'path';
import { supabaseServer } from '../../lib/supabase/server.js';

/**
 * ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏ó‡∏≥ 2 ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô:
 * 1. ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏Å‡∏ï‡∏¥‡∏à‡∏≤‡∏Å plain-codes.txt ‡πÄ‡∏õ‡πá‡∏ô Base64
 * 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Keylock.json ‡∏™‡∏≥‡∏£‡∏≠‡∏á
 * 3. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡∏á Supabase keylocks table
 */

// Paths
const plainFile = path.join(process.cwd(), 'data', 'plain-codes.txt');
const jsonFile = path.join(process.cwd(), 'data', 'Keylock.json');

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå
if (!fs.existsSync(plainFile)) {
  console.error('‚ùå Input file not found:', plainFile);
  process.exit(1);
}

// ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏Å‡∏ï‡∏¥
const lines = fs
  .readFileSync(plainFile, 'utf-8')
  .split(/\r?\n/)
  .map((line) => line.trim())
  .filter((line) => line.length > 0);

// ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Base64 + ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á JSON
const keylockData = lines.map((code) => ({
  hashed_code: Buffer.from(code, 'utf-8').toString('base64'),
  used: false,
}));

// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå Keylock.json
fs.writeFileSync(jsonFile, JSON.stringify(keylockData, null, 2));
console.log(`‚úÖ Wrote ${keylockData.length} keys to ${jsonFile}`);

// ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ Supabase
async function uploadToSupabase() {
  try {
    for (const key of keylockData) {
      const { error } = await supabaseServer
        .from('keylocks')
        .upsert(key, { onConflict: ['hashed_code'] });

      if (error) console.error('‚ùå Error inserting key:', key.hashed_code, error);
      else console.log('‚úÖ Inserted key:', key.hashed_code);
    }
    console.log('üéâ All keys uploaded to Supabase!');
  } catch (err) {
    console.error('‚ùå Unexpected error during upload:', err);
  }
}

// ‡∏£‡∏±‡∏ô
uploadToSupabase();
