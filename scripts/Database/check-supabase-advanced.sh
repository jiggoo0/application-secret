#!/bin/bash
# ======================================================================
# üì¶ Script: check-supabase-advanced.sh
# üß© Purpose: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Supabase (Production Ready)
# üßë‚Äçüíª Author: JP Visual & Docs DevOps (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)
# ======================================================================

# ------------------------------------------------------------
# üîß ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
# ------------------------------------------------------------
ENV_FILE=".env"
TABLES=("users" "keylocks" "uploads")  # ‡πÄ‡∏û‡∏¥‡πà‡∏° uploads table
TMP_DIR="./scripts/tmp"
TMP_BUCKETS="$TMP_DIR/sb_buckets.json"

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
mkdir -p "$TMP_DIR"

# ------------------------------------------------------------
# üß© ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env
# ------------------------------------------------------------
if [ ! -f "$ENV_FILE" ]; then
  echo "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå $ENV_FILE"
  exit 1
fi

export $(grep -v '^#' "$ENV_FILE" | xargs)

if [ -z "$SUPABASE_URL" ] || [ -z "$SUPABASE_SERVICE_ROLE_KEY" ]; then
  echo "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö SUPABASE_URL ‡∏´‡∏£‡∏∑‡∏≠ SUPABASE_SERVICE_ROLE_KEY"
  exit 1
fi

# ------------------------------------------------------------
# üïí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
# ------------------------------------------------------------
START_TIME=$(date +%s)
echo "======================================================================"
echo "üß† Supabase Deep Health Check"
echo "üìÖ $(date)"
echo "======================================================================"
echo "üîó URL: $SUPABASE_URL"
echo "======================================================================"

# ------------------------------------------------------------
# [1/5] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Auth API
# ------------------------------------------------------------
echo -e "\nüîç [1/5] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Auth API..."
AUTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
  -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
  "$SUPABASE_URL/auth/v1/health")

if [ "$AUTH_STATUS" -eq 200 ]; then
  echo "‚úÖ Auth API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (HTTP 200)"
else
  echo "‚ùå Auth API ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (HTTP $AUTH_STATUS)"
fi

# ------------------------------------------------------------
# [2/5] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Database API
# ------------------------------------------------------------
echo -e "\nüîç [2/5] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Database API..."
DB_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
  -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
  "$SUPABASE_URL/rest/v1/")

if [ "$DB_STATUS" -eq 200 ]; then
  echo "‚úÖ Database API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (HTTP 200)"
else
  echo "‚ùå Database API ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (HTTP $DB_STATUS)"
fi

# ------------------------------------------------------------
# [3/5] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á
# ------------------------------------------------------------
for TABLE_NAME in "${TABLES[@]}"; do
  TMP_DATA="$TMP_DIR/${TABLE_NAME}.json"
  echo -e "\nüîç [3/5] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á: $TABLE_NAME..."
  
  HTTP_CODE=$(curl -s -w "%{http_code}" \
    -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
    -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
    "$SUPABASE_URL/rest/v1/$TABLE_NAME?select=*&limit=3" \
    -o "$TMP_DATA")

  if [ "$HTTP_CODE" -eq 200 ]; then
    COUNT=$(curl -s -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
      -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
      "$SUPABASE_URL/rest/v1/$TABLE_NAME?select=id" | jq '. | length')

    echo "‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å '$TABLE_NAME' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (HTTP 200) - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô record: $COUNT"
    
    if command -v jq >/dev/null 2>&1 && [ -s "$TMP_DATA" ]; then
      FIELDS=$(jq -r '.[0] | keys[]?' "$TMP_DATA" 2>/dev/null | wc -l)
      echo "üìÑ ‡∏û‡∏ö $FIELDS fields:"
      jq -r '.[0] | keys[]?' "$TMP_DATA" | sed 's/^/   - /'
      echo "üìä ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (1 record):"
      jq '.[0]' "$TMP_DATA"
    fi
  else
    echo "‚ö†Ô∏è CRUD Test ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (HTTP $HTTP_CODE) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '$TABLE_NAME'"
  fi
done

# ------------------------------------------------------------
# [4/5] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Storage Service (List Buckets)
# ------------------------------------------------------------
echo -e "\nüîç [4/5] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Storage Service..."
STORAGE_CODE=$(curl -s -w "%{http_code}" -o "$TMP_BUCKETS" \
  -H "apikey: $SUPABASE_SERVICE_ROLE_KEY" \
  -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
  -H "Content-Type: application/json" \
  "$SUPABASE_URL/storage/v1/bucket")

if [ "$STORAGE_CODE" -eq 200 ]; then
  echo "‚úÖ Storage Service ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (HTTP 200)"
  if command -v jq >/dev/null 2>&1; then
    BUCKET_COUNT=$(jq '. | length' "$TMP_BUCKETS" 2>/dev/null)
    echo "üì¶ ‡∏û‡∏ö $BUCKET_COUNT bucket(s):"
    jq -r '.[] | "   - \(.name) [public=\(.public)]"' "$TMP_BUCKETS"
  fi
else
  echo "‚ö†Ô∏è Storage Service ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (HTTP $STORAGE_CODE)"
fi

# ------------------------------------------------------------
# [5/5] ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏ß‡∏°
# ------------------------------------------------------------
END_TIME=$(date +%s)
RUNTIME=$((END_TIME - START_TIME))

echo -e "\n======================================================================"
echo "üßæ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:"
echo " - Auth API:        $AUTH_STATUS"
echo " - Database API:    $DB_STATUS"
for TABLE_NAME in "${TABLES[@]}"; do
  echo " - Table $TABLE_NAME: checked"
done
echo " - Storage Service: $STORAGE_CODE"
echo " - Runtime:         ${RUNTIME}s"
echo "======================================================================"
echo "‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà $(date)"
echo "======================================================================"

# ------------------------------------------------------------
# üßπ ‡∏•‡∏ö temp file
# ------------------------------------------------------------
rm -f "$TMP_BUCKETS" "$TMP_DIR"/*.json